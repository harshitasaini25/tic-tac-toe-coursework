import random

class Board:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]

    def print_board(self):
        print("\n  1   2   3")
        for i, row in enumerate(self.board):
            print(f"{i+1} {' | '.join(row)}")
            if i < 2:
                print(" ---|---|---")

    def update_board(self, row, col, player):
        if self.board[row][col] == ' ':
            self.board[row][col] = player
            return True
        else:
            return False

    def check_winner(self, player):
        for row in self.board:
            if all(s == player for s in row):
                return True
        for col in range(3):
            if all(row[col] == player for row in self.board):
                return True
        if all(self.board[i][i] == player for i in range(3)) or all(self.board[i][2 - i] == player for i in range(3)):
            return True
        return False

    def is_full(self):
        return all(all(cell != ' ' for cell in row) for row in self.board)


class Player:
    def __init__(self, symbol):
        self.symbol = symbol

    def get_move(self):
        while True:
            try:
                row = int(input(f"Player {self.symbol}, enter the row (1-3): ")) - 1
                col = int(input(f"Player {self.symbol}, enter the column (1-3): ")) - 1
                if row in range(3) and col in range(3):
                    return row, col
                else:
                    print("Invalid input. Please enter numbers between 1 and 3.")
            except ValueError:
                print("Invalid input. Please enter numbers between 1 and 3.")


class ComputerPlayer(Player):
    def __init__(self, symbol):
        super().__init__(symbol)

    def get_move(self):
        row = random.randint(0, 2)
        col = random.randint(0, 2)
        return row, col


class Game:
    def __init__(self):
        self.board = Board()
        self.players = [Player('X'), ComputerPlayer('O')]  # One player is a ComputerPlayer
        self.current_player_idx = 0

    def switch_player(self):
        self.current_player_idx = 1 - self.current_player_idx

    def play(self):
        while True:
            self.board.print_board()
            current_player = self.players[self.current_player_idx]
            row, col = current_player.get_move()
            
            if self.board.update_board(row, col, current_player.symbol):
                if self.board.check_winner(current_player.symbol):
                    self.board.print_board()
                    print(f"Player {current_player.symbol} wins!")
                    break
                elif self.board.is_full():
                    self.board.print_board()
                    print("The game is a draw!")
                    break
                
                self.switch_player()
            else:
                print("Cell is already occupied. Try again.")

if __name__ == "__main__":
    game = Game()
    game.play()
